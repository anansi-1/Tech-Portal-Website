// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile       Profile?
  memberships   Membership[]
  payments      Payment[]
  internships   InternshipApplication[]
  startups      Startup[]
  webinarApps   WebinarApplication[]
  tickets       Ticket[]
  projects      Project[]
  notifications Notification[]
  auditLogs     AuditLog[]

  @@map("Users")
}

model Profile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  name      String
  contact   String?
  education String?
  skills    String?
  resume    String?
  avatar    String?

  user User @relation(fields: [userId], references: [id])

  @@map("Profiles")
}

model Membership {
  id        Int       @id @default(autoincrement())
  userId    Int
  planId    Int
  status    String    @default("Active")
  startDate DateTime  @default(now())
  endDate   DateTime?

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  @@index([userId, planId])
  @@map("Memberships")
}

model Plan {
  id           Int          @id @default(autoincrement())
  name         String
  price        Float
  billingCycle BillingCycle
  memberships  Membership[]

  @@map("Plans")
}

model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Float
  currency  String   @default("ETP")
  status    String   @default("Pending")
  invoiceNo String   @unique
  createdAt DateTime @default(now())

  user   User     @relation(fields: [userId], references: [id])
  ticket Ticket[]

  @@index([userId])
  @@map("Payments")
}

model InternshipApplication {
  id         Int      @id @default(autoincrement())
  userId     Int
  resume     String?
  skills     String?
  motivation String?
  status     String   @default("Draft")
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@map("InternshipApplications")
}

model Startup {
  id       Int     @id @default(autoincrement())
  userId   Int
  name     String
  logo     String?
  website  String?
  pitch    String?
  stage    String?
  traction String?
  deck     String?
  demoLink String?
  tags     String?
  status   String  @default("Draft")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@map("Startups")
}

model Webinar {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  schedule    DateTime
  capacity    Int?
  price       Float?
  status      String   @default("Upcoming")

  applications WebinarApplication[]
  tickets      Ticket[]

  @@map("Webinars")
}

model WebinarApplication {
  id        Int           @id @default(autoincrement())
  webinarId Int
  userId    Int
  status    WebinarStatus @default(Applied)
  createdAt DateTime      @default(now())

  webinar Webinar @relation(fields: [webinarId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([webinarId, userId])
  @@map("WebinarApplications")
}

model Ticket {
  id        Int     @id @default(autoincrement())
  webinarId Int
  userId    Int
  qrCode    String?
  paymentId Int?

  webinar Webinar  @relation(fields: [webinarId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@index([webinarId, userId])
  @@map("Tickets")
}

model Project {
  id          Int     @id @default(autoincrement())
  userId      Int
  title       String
  summary     String?
  description String?
  teamName    String
  teamMembers String?
  tags        String?
  demoLink    String?
  status      String  @default("Pending")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@map("Projects")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  status    String   @default("Pending")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("Notifications")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  ipAddress String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("AuditLogs")
}

enum UserRole {
  ADMIN
  USER
  REVIEWER
  MEMBER
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}

enum WebinarStatus {
  Applied
  Paid
  Confirmed
}
